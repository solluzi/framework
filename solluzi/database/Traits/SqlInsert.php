<?php
declare(strict_types=1);
namespace Solluzi\Database\Traits;

use Solluzi\Database\GenerateUUID;
use Solluzi\Interfaces\SQLQueryBuilder;

trait SqlInsert
{
    /**
     * insert method
     *  receives all values required in insert
     *
     * @param array $fields
     * @param array $values
     * @return SQLQueryBuilder
     */
    public function insert(array $data): SQLQueryBuilder
    {
        /*
        |----------------------------------------------------------------------------------------------
        | reset
        |----------------------------------------------------------------------------------------------
        |
        | clears object
        |
        */
        $this->reset();

        /*
        |----------------------------------------------------------------------------------------------
        | id
        |----------------------------------------------------------------------------------------------
        |
        | gets id acording to criterias (auto, serial, uuid)
        |
        */
        $this->id = (($this->idPolicy === 'auto') || ($this->idPolicy === 'serial')) ? $this->lastId($this->primaryKey) : GenerateUUID::guidv4();

        /*
        |----------------------------------------------------------------------------------------------
        | id, primary 
        |----------------------------------------------------------------------------------------------
        |
        | stores values into variables
        |
        */
        $value[] = $this->id;
        $field[] = $this->primaryKey;

        /*
        |----------------------------------------------------------------------------------------------
        | fields key
        |----------------------------------------------------------------------------------------------
        |
        | get all fields from data array
        |
        */
        $fields  = array_merge($field, array_keys($data));
        /*
        |----------------------------------------------------------------------------------------------
        | values
        |----------------------------------------------------------------------------------------------
        |
        | gets all values from data array
        |
        */
        $values  = array_merge($value, array_values($data));
        
        /*
        |----------------------------------------------------------------------------------------------
        | count
        |----------------------------------------------------------------------------------------------
        |
        | counts how many values has in array an then substitute to question mark
        |
        */
        $count   = str_repeat('?,', count($values) - 1).'?';
        /*
        |----------------------------------------------------------------------------------------------
        | base
        |----------------------------------------------------------------------------------------------
        |
        | sets the insert clause into query base
        |
        */
        $this->query->base = "INSERT INTO $this->table (".implode(',',$fields).") VALUES ($count)";
        /*
        |----------------------------------------------------------------------------------------------
        | values object
        |----------------------------------------------------------------------------------------------
        |
        | gets the values seted in array
        |
        */
        $this->values      = $values;
        /*
        |----------------------------------------------------------------------------------------------
        | type
        |----------------------------------------------------------------------------------------------
        |
        | sets the query type
        |
        */
        $this->query->type = 'insert';

        /*
        |----------------------------------------------------------------------------------------------
        | this
        |----------------------------------------------------------------------------------------------
        |
        | returns object
        |
        */
        return $this;
    }
}